/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package matrizeador;

import static com.sun.org.apache.xalan.internal.xsltc.compiler.util.Type.String;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Fernando Jose
 */
public class GUI extends javax.swing.JFrame 
{
    public Matriz Jose;
    public Matriz Fernando;
    public Matriz Resultado;   
    public GUI() {
        initComponents();
        jLabel5.setVisible(false);
        jLabel6.setVisible(false);
        CambiarA.setVisible(false);
        CambioFilaA.setVisible(false);
        CambioColumnaA.setVisible(false);
        NumeroCambioA.setVisible(false);
        jLabel7.setVisible(false);
        jLabel8.setVisible(false);        
        CambiarB.setVisible(false);        
        CambioFilaB.setVisible(false);        
        CambioColumnaB.setVisible(false);        
        NumeroCambioB.setVisible(false);   
        LlenarMatrizA.setVisible(false);
        LlenarMatrizB.setVisible(false);
        TranspuestaA.setVisible(false);
        TrasnpuestaB.setVisible(false);
        Aala3.setVisible(false);
        Bala3.setVisible(false);
        SumaMatriz.setVisible(false);
        RestaMatriz.setVisible(false);
        MultiplicacionMatriz.setVisible(false);
        ProductoMatriz.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        buttonGroup5 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        MatrizA = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        MatrizB = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        MatrizFinal = new javax.swing.JTable();
        SumaMatriz = new javax.swing.JButton();
        RestaMatriz = new javax.swing.JButton();
        ProductoMatriz = new javax.swing.JButton();
        MultiplicacionMatriz = new javax.swing.JButton();
        TranspuestaA = new javax.swing.JButton();
        Aala3 = new javax.swing.JButton();
        TrasnpuestaB = new javax.swing.JButton();
        Bala3 = new javax.swing.JButton();
        FilasA = new javax.swing.JTextField();
        ColumnasA = new javax.swing.JTextField();
        FilasB = new javax.swing.JTextField();
        ColumnasB = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        GenMatrizA = new javax.swing.JButton();
        LlenarMatrizA = new javax.swing.JButton();
        GenMatrizB = new javax.swing.JButton();
        LlenarMatrizB = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        CambiarA = new javax.swing.JButton();
        CambioFilaA = new javax.swing.JTextField();
        CambioColumnaA = new javax.swing.JTextField();
        CambioColumnaB = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        CambiarB = new javax.swing.JButton();
        CambioFilaB = new javax.swing.JTextField();
        NumeroCambioA = new javax.swing.JTextField();
        NumeroCambioB = new javax.swing.JTextField();
        Operaciones = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        MatrizA.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        MatrizA.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        MatrizA.setEnabled(false);
        MatrizA.getTableHeader().setReorderingAllowed(false);
        MatrizA.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                MatrizAKeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(MatrizA);

        MatrizB.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        MatrizB.setEnabled(false);
        MatrizB.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                MatrizBKeyTyped(evt);
            }
        });
        jScrollPane2.setViewportView(MatrizB);

        MatrizFinal.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        MatrizFinal.setEnabled(false);
        MatrizFinal.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                MatrizFinalKeyTyped(evt);
            }
        });
        jScrollPane3.setViewportView(MatrizFinal);

        SumaMatriz.setText("Suma de Matrices");
        SumaMatriz.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SumaMatrizActionPerformed(evt);
            }
        });

        RestaMatriz.setText("Diferencia de Matrices");
        RestaMatriz.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RestaMatrizActionPerformed(evt);
            }
        });

        ProductoMatriz.setText("Producto Punto de Matrices");
        ProductoMatriz.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProductoMatrizActionPerformed(evt);
            }
        });

        MultiplicacionMatriz.setText("Multiplicacion de Matrices");
        MultiplicacionMatriz.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MultiplicacionMatrizActionPerformed(evt);
            }
        });

        TranspuestaA.setText("Transpuesta");
        TranspuestaA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TranspuestaAActionPerformed(evt);
            }
        });

        Aala3.setText("A^3");
        Aala3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Aala3ActionPerformed(evt);
            }
        });

        TrasnpuestaB.setText("Transpuesta");
        TrasnpuestaB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TrasnpuestaBActionPerformed(evt);
            }
        });

        Bala3.setText("B^3");
        Bala3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Bala3ActionPerformed(evt);
            }
        });

        FilasA.setText("1");
        FilasA.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                FilasAKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                FilasAKeyTyped(evt);
            }
        });

        ColumnasA.setText("1");
        ColumnasA.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                ColumnasAKeyTyped(evt);
            }
        });

        FilasB.setText("1");
        FilasB.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                FilasBKeyTyped(evt);
            }
        });

        ColumnasB.setText("1");
        ColumnasB.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                ColumnasBKeyTyped(evt);
            }
        });

        jLabel1.setText("Filas");

        jLabel2.setText("Columnas");

        jLabel3.setText("Filas");

        jLabel4.setText("Columnas");

        GenMatrizA.setText("Generar Matriz");
        GenMatrizA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GenMatrizAActionPerformed(evt);
            }
        });

        LlenarMatrizA.setText("Llenar Aleatoriamente");
        LlenarMatrizA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LlenarMatrizAActionPerformed(evt);
            }
        });

        GenMatrizB.setText("Generar Matriz");
        GenMatrizB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GenMatrizBActionPerformed(evt);
            }
        });

        LlenarMatrizB.setText("Llenar Aleatoriamente");
        LlenarMatrizB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LlenarMatrizBActionPerformed(evt);
            }
        });

        jLabel5.setText("Fila");

        jLabel6.setText("Columna");

        CambiarA.setText("Cambiar Número");
        CambiarA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CambiarAActionPerformed(evt);
            }
        });

        CambioFilaA.setText("1");
        CambioFilaA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CambioFilaAActionPerformed(evt);
            }
        });
        CambioFilaA.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                CambioFilaAKeyTyped(evt);
            }
        });

        CambioColumnaA.setText("1");
        CambioColumnaA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CambioColumnaAActionPerformed(evt);
            }
        });
        CambioColumnaA.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                CambioColumnaAKeyTyped(evt);
            }
        });

        CambioColumnaB.setText("1");
        CambioColumnaB.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                CambioColumnaBKeyTyped(evt);
            }
        });

        jLabel7.setText("Fila");

        jLabel8.setText("Columna");

        CambiarB.setText("Cambiar Número");
        CambiarB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CambiarBActionPerformed(evt);
            }
        });

        CambioFilaB.setText("1");
        CambioFilaB.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                CambioFilaBKeyTyped(evt);
            }
        });

        NumeroCambioA.setText("0");
        NumeroCambioA.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                NumeroCambioAKeyTyped(evt);
            }
        });

        NumeroCambioB.setText("0");
        NumeroCambioB.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                NumeroCambioBKeyTyped(evt);
            }
        });

        Operaciones.setText("Operaciones");
        Operaciones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OperacionesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(CambiarA)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE)
                                .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(36, 36, 36)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(CambioColumnaA, javax.swing.GroupLayout.DEFAULT_SIZE, 69, Short.MAX_VALUE)
                            .addComponent(CambioFilaA)
                            .addComponent(NumeroCambioA)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(TranspuestaA, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(Aala3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(31, 31, 31)
                                    .addComponent(FilasA, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(32, 32, 32)
                                    .addComponent(ColumnasA, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel2))))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(GenMatrizA)
                            .addGap(18, 18, 18)
                            .addComponent(LlenarMatrizA)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 385, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 396, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(CambiarB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(49, 49, 49)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(CambioFilaB, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(CambioColumnaB, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(NumeroCambioB, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(TrasnpuestaB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(Bala3, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(32, 32, 32)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(ColumnasB, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(FilasB, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(GenMatrizB)
                            .addGap(18, 18, 18)
                            .addComponent(LlenarMatrizB))))
                .addGap(46, 46, 46)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(MultiplicacionMatriz, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(SumaMatriz, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(RestaMatriz, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ProductoMatriz, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(106, 106, 106)
                        .addComponent(Operaciones)
                        .addGap(113, 113, 113))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 411, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(51, 51, 51))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 301, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(SumaMatriz)
                            .addComponent(TranspuestaA)
                            .addComponent(TrasnpuestaB)
                            .addComponent(FilasA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(FilasB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)
                            .addComponent(Operaciones))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(RestaMatriz)
                            .addComponent(Aala3)
                            .addComponent(Bala3)
                            .addComponent(ColumnasA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ColumnasB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4)))
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ProductoMatriz)
                    .addComponent(GenMatrizA)
                    .addComponent(LlenarMatrizA)
                    .addComponent(GenMatrizB)
                    .addComponent(LlenarMatrizB))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(MultiplicacionMatriz))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(35, 35, 35)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel5)
                                    .addComponent(CambioFilaA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(CambioColumnaA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(CambiarA, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(NumeroCambioA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(CambioFilaB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(CambioColumnaB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(CambiarB)
                            .addComponent(NumeroCambioB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(127, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void GenMatrizAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GenMatrizAActionPerformed
    //Este boton genera una Matriz del tamaño que el usuario indica llena de ceros como elemento nulo    
        if (Integer.parseInt(FilasA.getText()) <= 0 || Integer.parseInt(ColumnasA.getText()) <= 0)
        {
            JOptionPane.showMessageDialog(null, "Las columnas o filas no pueden ser nulas o negativas");
        }
        else 
        {
        DefaultTableModel model = (DefaultTableModel) MatrizA.getModel();
        model.setRowCount(Integer.parseInt(FilasA.getText()));
        model.setColumnCount(Integer.parseInt(ColumnasA.getText())); 
        int n = Integer.parseInt(FilasA.getText());
        int m = Integer.parseInt(ColumnasA.getText());
        jLabel5.setVisible(true);
        jLabel6.setVisible(true);
        CambiarA.setVisible(true);
        CambioFilaA.setVisible(true);
        CambioColumnaA.setVisible(true);
        NumeroCambioA.setVisible(true);
        FilasA.enable(false);
        ColumnasA.enable(false);
        LlenarMatrizA.setVisible(true);
        TranspuestaA.setVisible(true);
        Aala3.setVisible(true);      
        for (int i=0; i<n; i++)
        {
            for(int j=0; j<m;j++)
            {
                MatrizA.setValueAt(0, i, j);
            }
        }
        Fernando = new Matriz(Integer.parseInt(FilasA.getText()),Integer.parseInt(ColumnasA.getText()));        
        if (n<m || n==m)
        {       
        for (int i = 0; i<m;i++)
        {
            for (int j = 0; j<n;j++)
            {
                int numeroAleatorio = 0;
                this.Fernando.table[j][i] = Integer.toString(numeroAleatorio);                
            }
        }
        }
        if (m<n)
        {
        for (int i = 0; i<n;i++)
        {
            for (int j = 0; j<m;j++)
            {
                int numeroAleatorio = 0;
                this.Fernando.table[i][j] = Integer.toString(numeroAleatorio);
            }
        }
      }
    }        
    }//GEN-LAST:event_GenMatrizAActionPerformed

    private void GenMatrizBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GenMatrizBActionPerformed
    //Este boton genera una Matriz del tamaño que el usuario indica llena de ceros como elemento nulo   
        if (Integer.parseInt(FilasB.getText()) <= 0 || Integer.parseInt(ColumnasB.getText()) <= 0)
        {
            JOptionPane.showMessageDialog(null, "Las columnas o filas no pueden ser nulas o negativas");
        }
        else 
        {
        DefaultTableModel model = (DefaultTableModel) MatrizB.getModel();
        model.setRowCount(Integer.parseInt(FilasB.getText()));
        model.setColumnCount(Integer.parseInt(ColumnasB.getText())); 
        int n = Integer.parseInt(FilasB.getText());
        int m = Integer.parseInt(ColumnasB.getText());
        jLabel7.setVisible(true);
        jLabel8.setVisible(true);        
        CambiarB.setVisible(true);        
        CambioFilaB.setVisible(true);        
        CambioColumnaB.setVisible(true);        
        NumeroCambioB.setVisible(true);
        FilasB.enable(false);
        ColumnasB.enable(false);  
        LlenarMatrizB.setVisible(true);
        TrasnpuestaB.setVisible(true);
        Bala3.setVisible(true);    
        for (int i=0; i<n; i++)
        {
            for(int j=0; j<m;j++)
            {
                MatrizB.setValueAt(0, i, j);
            }
        }
        Jose = new Matriz(Integer.parseInt(FilasB.getText()),Integer.parseInt(ColumnasB.getText()));
        if (n<m || n==m)
        {       
        for (int i = 0; i<m;i++)
        {
            for (int j = 0; j<n;j++)
            {
                int numeroAleatorio = 0;
                this.Jose.table[j][i] = Integer.toString(numeroAleatorio);                
            }
        }
        }
        else if (m<n)
        {
        for (int i = 0; i<n;i++)
        {
            for (int j = 0; j<m;j++)
            {
                int numeroAleatorio = 0;
                this.Jose.table[i][j] = Integer.toString(numeroAleatorio);
            }
        } 
        }
      }
    }//GEN-LAST:event_GenMatrizBActionPerformed

    private void MatrizAKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_MatrizAKeyTyped
         //codigo basura       
    }//GEN-LAST:event_MatrizAKeyTyped

    private void MatrizBKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_MatrizBKeyTyped
     //Esto evita que letras sean introducidas donde van los numeros   
        char c = evt.getKeyChar();
        if (!(Character.isDigit(c) || c == KeyEvent.VK_BACK_SPACE || c == KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_MatrizBKeyTyped

    private void MatrizFinalKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_MatrizFinalKeyTyped
      //Esto evita que letras sean introducidas donde van los numeros   
        char c = evt.getKeyChar();
        if (!(Character.isDigit(c) || c == KeyEvent.VK_BACK_SPACE || c == KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_MatrizFinalKeyTyped

    private void SumaMatrizActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SumaMatrizActionPerformed
        //Este Boton suma las dos matrices generadas previamente por el Usuario
        if (Integer.parseInt(FilasB.getText()) == Integer.parseInt(FilasA.getText()) && Integer.parseInt(ColumnasB.getText()) == Integer.parseInt(ColumnasA.getText()))
        { 
        Resultado = new Matriz(Integer.parseInt(FilasA.getText()),Integer.parseInt(ColumnasA.getText()));
        int n = Integer.parseInt(FilasB.getText());
        int m = Integer.parseInt(ColumnasB.getText());      
        for (int i = 0; i<m;i++)
        {
            for (int j = 0; j<n;j++)
            {
                String numerobase1 = this.Fernando.table[i][j];
                String numerobase2 = this.Jose.table[i][j]; 
                int numerosuma = Integer.parseInt(numerobase1) + Integer.parseInt(numerobase2);
                this.Resultado.table[i][j] = Integer.toString(numerosuma);                               
            }
        }        
        DefaultTableModel model = (DefaultTableModel) MatrizFinal.getModel();
        model.setRowCount(Integer.parseInt(FilasB.getText()));
        model.setColumnCount(Integer.parseInt(ColumnasB.getText())); 
        for (int i=0; i<n; i++)
        {
            for(int j=0; j<m;j++)
            {
                MatrizFinal.setValueAt(Resultado.table[i][j], i, j);
            }
        }
        }
        else 
        {
            JOptionPane.showMessageDialog(null, "Para sumar las matrices estas deben ser de igual tamaño");
        }
    }//GEN-LAST:event_SumaMatrizActionPerformed

    private void LlenarMatrizAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LlenarMatrizAActionPerformed
        //Este Boton Llena la matriz A con numeros aleatorios
        Fernando = new Matriz(Integer.parseInt(FilasA.getText()),Integer.parseInt(ColumnasA.getText()));
        int n = Integer.parseInt(FilasA.getText());
        int m = Integer.parseInt(ColumnasA.getText());
        if (n<m || n==m)
        {       
        for (int i = 0; i<m;i++)
        {
            for (int j = 0; j<n;j++)
            {
                int numeroAleatorio = (int)(Math.random() *(100));
                this.Fernando.table[j][i] = Integer.toString(numeroAleatorio);                
            }
        }
        }
        else if (m<n)
        {
        for (int i = 0; i<n;i++)
        {
            for (int j = 0; j<m;j++)
            {
                int numeroAleatorio = (int)(Math.random() *(100));
                this.Fernando.table[i][j] = Integer.toString(numeroAleatorio);
            }
        } 
        }
        DefaultTableModel model = (DefaultTableModel) MatrizA.getModel();
        model.setRowCount(Integer.parseInt(FilasA.getText()));
        model.setColumnCount(Integer.parseInt(ColumnasA.getText())); 
        for (int i=0; i<n; i++)
        {
            for(int j=0; j<m;j++)
            {
                MatrizA.setValueAt(Fernando.table[i][j], i, j);
            }
        }
    }//GEN-LAST:event_LlenarMatrizAActionPerformed

    private void LlenarMatrizBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LlenarMatrizBActionPerformed
        //Este Boton Llena la matriz B con numeros aleatorios
        Jose = new Matriz(Integer.parseInt(FilasB.getText()),Integer.parseInt(ColumnasB.getText()));
        int n = Integer.parseInt(FilasB.getText());
        int m = Integer.parseInt(ColumnasB.getText());
        if (n<m || n==m)
        {       
        for (int i = 0; i<m;i++)
        {
            for (int j = 0; j<n;j++)
            {
                int numeroAleatorio = (int)(Math.random() *(100));
                this.Jose.table[j][i] = Integer.toString(numeroAleatorio);
            }
        }
        }
        else if (m<n)
        {
        for (int i = 0; i<n;i++)
        {
            for (int j = 0; j<m;j++)
            {
                int numeroAleatorio = (int)(Math.random() *(100));
                this.Jose.table[i][j] = Integer.toString(numeroAleatorio);
            }
        } 
        }
        DefaultTableModel model = (DefaultTableModel) MatrizB.getModel();
        model.setRowCount(Integer.parseInt(FilasB.getText()));
        model.setColumnCount(Integer.parseInt(ColumnasB.getText())); 
        for (int i=0; i<n; i++)
        {
            for(int j=0; j<m;j++)
            {
                MatrizB.setValueAt(Jose.table[i][j], i, j);
            }
        }
    }//GEN-LAST:event_LlenarMatrizBActionPerformed

    private void CambioFilaAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CambioFilaAActionPerformed
        //Codigo basura
    }//GEN-LAST:event_CambioFilaAActionPerformed

    private void CambioColumnaAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CambioColumnaAActionPerformed
        //codigo basura
    }//GEN-LAST:event_CambioColumnaAActionPerformed

    private void CambioFilaAKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_CambioFilaAKeyTyped
        //Esto evita que letras sean introducidas donde van los numeros   
        char c = evt.getKeyChar();
        if (!(Character.isDigit(c) || c == KeyEvent.VK_BACK_SPACE || c == KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_CambioFilaAKeyTyped

    private void CambioColumnaAKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_CambioColumnaAKeyTyped
        //Esto evita que letras sean introducidas donde van los numeros   
        char c = evt.getKeyChar();
        if (!(Character.isDigit(c) || c == KeyEvent.VK_BACK_SPACE || c == KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_CambioColumnaAKeyTyped

    private void NumeroCambioAKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_NumeroCambioAKeyTyped
       //Esto evita que letras sean introducidas donde van los numeros   
        char c = evt.getKeyChar();
        if (!(Character.isDigit(c) || c == KeyEvent.VK_BACK_SPACE || c == KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_NumeroCambioAKeyTyped

    private void CambioFilaBKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_CambioFilaBKeyTyped
        //Esto evita que letras sean introducidas donde van los numeros   
        char c = evt.getKeyChar();
        if (!(Character.isDigit(c) || c == KeyEvent.VK_BACK_SPACE || c == KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_CambioFilaBKeyTyped

    private void CambioColumnaBKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_CambioColumnaBKeyTyped
        //Esto evita que letras sean introducidas donde van los numeros   
        char c = evt.getKeyChar();
        if (!(Character.isDigit(c) || c == KeyEvent.VK_BACK_SPACE || c == KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_CambioColumnaBKeyTyped

    private void NumeroCambioBKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_NumeroCambioBKeyTyped
        //Esto evita que letras sean introducidas donde van los numeros   
        char c = evt.getKeyChar();
        if (!(Character.isDigit(c) || c == KeyEvent.VK_BACK_SPACE || c == KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_NumeroCambioBKeyTyped

    private void FilasAKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_FilasAKeyPressed
    }//GEN-LAST:event_FilasAKeyPressed
        //Codigo basura
    private void CambiarAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CambiarAActionPerformed
        //Esto Boton cambia un numero especifico en la Matriz A donde el Usuario quiere que este sea cambiado
        if ((Integer.parseInt(FilasA.getText()) >= Integer.parseInt(CambioFilaA.getText())) && (Integer.parseInt(ColumnasA.getText()) >= Integer.parseInt(CambioColumnaA.getText())))
        {
            int valor = Integer.parseInt(NumeroCambioA.getText());
            Fernando.table[Integer.parseInt(CambioFilaA.getText())-1][Integer.parseInt(CambioColumnaA.getText())-1] = Integer.toString(valor);
        }
        else
        {
            JOptionPane.showMessageDialog(null, "No se pueden reemplazar números en filas o columnas no existentes");
        }
        int n = Integer.parseInt(FilasA.getText());
        int m = Integer.parseInt(ColumnasA.getText());
        for (int i=0; i<n; i++)
        {
            for(int j=0; j<m;j++)
            {
                MatrizA.setValueAt(Fernando.table[i][j], i, j);
            }
        }                              
    }//GEN-LAST:event_CambiarAActionPerformed

    private void CambiarBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CambiarBActionPerformed
         //Esto Boton cambia un numero especifico en la Matriz B donde el Usuario quiere que este sea cambiado
        if ((Integer.parseInt(FilasB.getText()) >= Integer.parseInt(CambioFilaB.getText())) && (Integer.parseInt(ColumnasB.getText()) >= Integer.parseInt(CambioColumnaB.getText())))
        {
            int valor = Integer.parseInt(NumeroCambioB.getText());
            Jose.table[Integer.parseInt(CambioFilaB.getText())-1][Integer.parseInt(CambioColumnaB.getText())-1] = Integer.toString(valor);
        }
        else
        {
            JOptionPane.showMessageDialog(null, "No se pueden reemplazar números en filas o columnas no existentes");
        }
        int n = Integer.parseInt(FilasB.getText());
        int m = Integer.parseInt(ColumnasB.getText());
        for (int i=0; i<n; i++)
        {
            for(int j=0; j<m;j++)
            {
                MatrizB.setValueAt(Jose.table[i][j], i, j);
            }
        } 
    }//GEN-LAST:event_CambiarBActionPerformed

    private void TranspuestaAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TranspuestaAActionPerformed
         //Esto Boton realiza la transpuesta de A y la muestra al Usuario
        DefaultTableModel model = (DefaultTableModel) MatrizFinal.getModel();
        model.setRowCount(Integer.parseInt(ColumnasA.getText()));
        model.setColumnCount(Integer.parseInt(FilasA.getText()));
        int n = Integer.parseInt(FilasA.getText());
        int m = Integer.parseInt(ColumnasA.getText());  
        if (n==m || n>m)
        {                   
        for (int i=0; i<m; i++)
        {
            for(int j=0; j<n;j++)
            {
                MatrizFinal.setValueAt(Fernando.table[j][i], i, j);
            }
        }
        }
        else if (m>n)
        {
        for (int i=0; i<m; i++)
        {
            for(int j=0; j<n;j++)
            {
                MatrizFinal.setValueAt(Fernando.table[j][i], i, j);
            }
        }
        }
    }//GEN-LAST:event_TranspuestaAActionPerformed

    private void TrasnpuestaBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TrasnpuestaBActionPerformed
        //Esto Boton realiza la transpuesta de B y la muestra al Usuario
        DefaultTableModel model = (DefaultTableModel) MatrizFinal.getModel();
        model.setRowCount(Integer.parseInt(ColumnasB.getText()));
        model.setColumnCount(Integer.parseInt(FilasB.getText()));
        int n = Integer.parseInt(FilasB.getText());
        int m = Integer.parseInt(ColumnasB.getText());  
        if (n==m || n>m)
        {                   
        for (int i=0; i<m; i++)
        {
            for(int j=0; j<n;j++)
            {
                MatrizFinal.setValueAt(Jose.table[j][i], i, j);
            }
        }
        }
        else if (m>n)
        {
        for (int i=0; i<m; i++)
        {
            for(int j=0; j<n;j++)
            {
                MatrizFinal.setValueAt(Jose.table[j][i], i, j);
            }
        }
        }
    }//GEN-LAST:event_TrasnpuestaBActionPerformed

    private void Aala3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Aala3ActionPerformed
        //Esto Boton multiplica al cubo todos los elementos de la Matriz A y los muestra al Usuario
        Resultado = new Matriz(Integer.parseInt(FilasA.getText()),Integer.parseInt(ColumnasA.getText()));
        int n = Integer.parseInt(FilasA.getText());
        int m = Integer.parseInt(ColumnasA.getText());
        if (n<m || n==m)
        {       
        for (int i = 0; i<m;i++)
        {
            for (int j = 0; j<n;j++)
            {
                String numerobase = this.Fernando.table[j][i]; 
                int numeroelevado = Integer.parseInt(numerobase)*Integer.parseInt(numerobase)*Integer.parseInt(numerobase);
                this.Resultado.table[j][i] = Integer.toString(numeroelevado);                               
            }
        }
        }
        else if (m<n)
        {
        for (int i = 0; i<n;i++)
        {
            for (int j = 0; j<m;j++)
            {
                String numerobase = this.Fernando.table[j][i]; 
                int numeroelevado = Integer.parseInt(numerobase)*Integer.parseInt(numerobase)*Integer.parseInt(numerobase);
                this.Resultado.table[j][i] = Integer.toString(numeroelevado);
            }
        } 
        }
        DefaultTableModel model = (DefaultTableModel) MatrizFinal.getModel();
        model.setRowCount(Integer.parseInt(FilasA.getText()));
        model.setColumnCount(Integer.parseInt(ColumnasA.getText())); 
        for (int i=0; i<n; i++)
        {
            for(int j=0; j<m;j++)
            {
                MatrizFinal.setValueAt(Resultado.table[i][j], i, j);
            }
        }
    }//GEN-LAST:event_Aala3ActionPerformed

    private void Bala3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Bala3ActionPerformed
        //Esto Boton multiplica al cubo todos los elementos de la Matriz B y los muestra al Usuario
        Resultado = new Matriz(Integer.parseInt(FilasB.getText()),Integer.parseInt(ColumnasB.getText()));
        int n = Integer.parseInt(FilasB.getText());
        int m = Integer.parseInt(ColumnasB.getText());
        if (n<m || n==m)
        {       
        for (int i = 0; i<m;i++)
        {
            for (int j = 0; j<n;j++)
            {
                String numerobase = this.Jose.table[j][i]; 
                int numeroelevado = Integer.parseInt(numerobase)*Integer.parseInt(numerobase)*Integer.parseInt(numerobase);
                this.Resultado.table[j][i] = Integer.toString(numeroelevado);                               
            }
        }
        }
        else if (m<n)
        {
        for (int i = 0; i<n;i++)
        {
            for (int j = 0; j<m;j++)
            {
                String numerobase = this.Jose.table[j][i]; 
                int numeroelevado = Integer.parseInt(numerobase)*Integer.parseInt(numerobase)*Integer.parseInt(numerobase);
                this.Resultado.table[j][i] = Integer.toString(numeroelevado);
            }
        } 
        }
        DefaultTableModel model = (DefaultTableModel) MatrizFinal.getModel();
        model.setRowCount(Integer.parseInt(FilasB.getText()));
        model.setColumnCount(Integer.parseInt(ColumnasB.getText())); 
        for (int i=0; i<n; i++)
        {
            for(int j=0; j<m;j++)
            {
                MatrizFinal.setValueAt(Resultado.table[i][j], i, j);
            }
        }
    }//GEN-LAST:event_Bala3ActionPerformed

    private void RestaMatrizActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RestaMatrizActionPerformed
        //Este Boton resta las dos matrices generadas previamente por el Usuario
        if (Integer.parseInt(FilasB.getText()) == Integer.parseInt(FilasA.getText()) && Integer.parseInt(ColumnasB.getText()) == Integer.parseInt(ColumnasA.getText()))
        { 
        Resultado = new Matriz(Integer.parseInt(FilasA.getText()),Integer.parseInt(ColumnasA.getText()));
        int n = Integer.parseInt(FilasB.getText());
        int m = Integer.parseInt(ColumnasB.getText());      
        for (int i = 0; i<m;i++)
        {
            for (int j = 0; j<n;j++)
            {
                String numerobase1 = this.Fernando.table[i][j];
                String numerobase2 = this.Jose.table[i][j]; 
                int numerosuma = Integer.parseInt(numerobase1) - Integer.parseInt(numerobase2);
                this.Resultado.table[i][j] = Integer.toString(numerosuma);                               
            }
        }        
        DefaultTableModel model = (DefaultTableModel) MatrizFinal.getModel();
        model.setRowCount(Integer.parseInt(FilasB.getText()));
        model.setColumnCount(Integer.parseInt(ColumnasB.getText())); 
        for (int i=0; i<n; i++)
        {
            for(int j=0; j<m;j++)
            {
                MatrizFinal.setValueAt(Resultado.table[i][j], i, j);
            }
        }
        }
        else 
        {
            JOptionPane.showMessageDialog(null, "Para restar las matrices estas deben ser de igual tamaño");
        }
    }//GEN-LAST:event_RestaMatrizActionPerformed

    private void ProductoMatrizActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProductoMatrizActionPerformed
        //Este Boton multiplica las dos matrices generadas previamente por el Usuario elemento a elemento
        if (Integer.parseInt(FilasB.getText()) == Integer.parseInt(FilasA.getText()) && Integer.parseInt(ColumnasB.getText()) == Integer.parseInt(ColumnasA.getText()))
        { 
        Resultado = new Matriz(Integer.parseInt(FilasA.getText()),Integer.parseInt(ColumnasA.getText()));
        int n = Integer.parseInt(FilasB.getText());
        int m = Integer.parseInt(ColumnasB.getText());      
        for (int i = 0; i<m;i++)
        {
            for (int j = 0; j<n;j++)
            {
                String numerobase1 = this.Fernando.table[i][j];
                String numerobase2 = this.Jose.table[i][j]; 
                int numerosuma = Integer.parseInt(numerobase1) * Integer.parseInt(numerobase2);
                this.Resultado.table[i][j] = Integer.toString(numerosuma);                               
            }
        }        
        DefaultTableModel model = (DefaultTableModel) MatrizFinal.getModel();
        model.setRowCount(Integer.parseInt(FilasB.getText()));
        model.setColumnCount(Integer.parseInt(ColumnasB.getText())); 
        for (int i=0; i<n; i++)
        {
            for(int j=0; j<m;j++)
            {
                MatrizFinal.setValueAt(Resultado.table[i][j], i, j);
            }
        }
        }
        else 
        {
            JOptionPane.showMessageDialog(null, "Para hacer producto punto las matrices estas deben ser de igual tamaño");
        }
    }//GEN-LAST:event_ProductoMatrizActionPerformed

    private void MultiplicacionMatrizActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MultiplicacionMatrizActionPerformed
        //Este Boton multiplica las Matrices de forma regular
        if (Integer.parseInt(ColumnasA.getText()) == Integer.parseInt(FilasB.getText()))
        {
            Resultado = new Matriz(Integer.parseInt(FilasA.getText()),Integer.parseInt(ColumnasB.getText()));
            int n = Integer.parseInt(FilasA.getText());
            int m = Integer.parseInt(ColumnasB.getText());      
            int p = Integer.parseInt(ColumnasA.getText());
            int sum = 0;
            for (int i = 0; i<n;i++)
            {
                for (int j = 0; j<m;j++)
                {
                   for (int k=0; k<p; k++)
                   {
                       sum = sum + Integer.parseInt(this.Fernando.table[i][k])*Integer.parseInt(this.Jose.table[k][j]);                     
                   }
                    this.Resultado.table[i][j] = Integer.toString(sum);
                    sum = 0;
                }
            }
            DefaultTableModel model = (DefaultTableModel) MatrizFinal.getModel();
            model.setRowCount(Integer.parseInt(FilasA.getText()));
            model.setColumnCount(Integer.parseInt(ColumnasB.getText())); 
            for (int i=0; i<n; i++)
            {
                for(int j=0; j<m;j++)
                {
                MatrizFinal.setValueAt(Resultado.table[i][j], i, j);
                }
            }
        }
        else
        {
            JOptionPane.showMessageDialog(null, "Para multiplicar Matrices el numero de Columnas de A debe ser igual al numero de Filas de B");
        }
    }//GEN-LAST:event_MultiplicacionMatrizActionPerformed

    private void FilasAKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_FilasAKeyTyped
        //Esto evita que letras sean introducidas donde van los numeros   
        char c = evt.getKeyChar();
        if (!(Character.isDigit(c) || c == KeyEvent.VK_BACK_SPACE || c == KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_FilasAKeyTyped

    private void ColumnasAKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ColumnasAKeyTyped
        //Esto evita que letras sean introducidas donde van los numeros   
        char c = evt.getKeyChar();
        if (!(Character.isDigit(c) || c == KeyEvent.VK_BACK_SPACE || c == KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_ColumnasAKeyTyped

    private void FilasBKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_FilasBKeyTyped
        //Esto evita que letras sean introducidas donde van los numeros   
        char c = evt.getKeyChar();
        if (!(Character.isDigit(c) || c == KeyEvent.VK_BACK_SPACE || c == KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_FilasBKeyTyped

    private void ColumnasBKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ColumnasBKeyTyped
        //Esto evita que letras sean introducidas donde van los numeros   
        char c = evt.getKeyChar();
        if (!(Character.isDigit(c) || c == KeyEvent.VK_BACK_SPACE || c == KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_ColumnasBKeyTyped

    private void OperacionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OperacionesActionPerformed
        if (Aala3.isVisible() && Bala3.isVisible())
        {
            SumaMatriz.setVisible(true);
            RestaMatriz.setVisible(true);
            MultiplicacionMatriz.setVisible(true);
            ProductoMatriz.setVisible(true);
        }
        else
        {
            JOptionPane.showMessageDialog(null, "Para realizar operaciones se necesitan dos matrices generadas");
        }
    }//GEN-LAST:event_OperacionesActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Aala3;
    private javax.swing.JButton Bala3;
    private javax.swing.JButton CambiarA;
    private javax.swing.JButton CambiarB;
    private javax.swing.JTextField CambioColumnaA;
    private javax.swing.JTextField CambioColumnaB;
    private javax.swing.JTextField CambioFilaA;
    private javax.swing.JTextField CambioFilaB;
    private javax.swing.JTextField ColumnasA;
    private javax.swing.JTextField ColumnasB;
    private javax.swing.JTextField FilasA;
    private javax.swing.JTextField FilasB;
    private javax.swing.JButton GenMatrizA;
    private javax.swing.JButton GenMatrizB;
    private javax.swing.JButton LlenarMatrizA;
    private javax.swing.JButton LlenarMatrizB;
    private javax.swing.JTable MatrizA;
    private javax.swing.JTable MatrizB;
    private javax.swing.JTable MatrizFinal;
    private javax.swing.JButton MultiplicacionMatriz;
    private javax.swing.JTextField NumeroCambioA;
    private javax.swing.JTextField NumeroCambioB;
    private javax.swing.JButton Operaciones;
    private javax.swing.JButton ProductoMatriz;
    private javax.swing.JButton RestaMatriz;
    private javax.swing.JButton SumaMatriz;
    private javax.swing.JButton TranspuestaA;
    private javax.swing.JButton TrasnpuestaB;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.ButtonGroup buttonGroup5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    // End of variables declaration//GEN-END:variables
}
